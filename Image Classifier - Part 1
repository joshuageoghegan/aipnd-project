# Imports here
%matplotlib inline
%config InlineBackend.figure_format = 'retina'

import matplotlib.pyplot as plt
import numpy as np
#import pandas as pd

import torch
from torch import nn
from torch import optim
import torch.nn.functional as F
from torchvision import datasets, transforms, models

import time

from workspace_utils import active_session



data_dir = 'flowers'
train_dir = data_dir + '/train'
valid_dir = data_dir + '/valid'
test_dir = data_dir + '/test'



# DONE: Define your transforms for the training, validation, and testing sets
train_transforms = transforms.Compose([transforms.CenterCrop(224),
                                       transforms.RandomRotation(30),
                                       transforms.RandomResizedCrop(224),
                                       transforms.RandomHorizontalFlip(),
                                       transforms.Resize(224), #resize after centercrop otherwise fails. Josh
                                       transforms.ToTensor(),
                                       transforms.Normalize((0.485, 0.456, 0.406),(0.229, 0.224, 0.225))])

validation_transforms = transforms.Compose([transforms.CenterCrop(224),
                                      transforms.Resize(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.485, 0.456, 0.406),(0.229, 0.224, 0.225))])

test_transforms = transforms.Compose([transforms.CenterCrop(224),
                                      transforms.Resize(224),
                                      transforms.ToTensor(),
                                      transforms.Normalize((0.485, 0.456, 0.406),(0.229, 0.224, 0.225))])

# DONE: Load the datasets with ImageFolder
train_data = datasets.ImageFolder(data_dir + '/train', transform=train_transforms)
validation_data = datasets.ImageFolder(data_dir + '/valid', transform=validation_transforms)
test_data = datasets.ImageFolder(data_dir + '/test', transform=test_transforms)


# DONE: Using the image datasets and the trainforms, define the dataloaders
trainloader = torch.utils.data.DataLoader(train_data, batch_size=64, shuffle=True)
validationloader = torch.utils.data.DataLoader(validation_data, batch_size=32, shuffle=True)
testloader = torch.utils.data.DataLoader(test_data, batch_size=32, shuffle=True)



import json

with open('cat_to_name.json', 'r') as f:
    cat_to_name = json.load(f)
    
    
    
# DONE: Build and train your network.
model = models.densenet121(pretrained=True)
#model = models.vgg16(pretrained=True)
model


# Define a new, untrained feed-forward network as a classifier, using ReLU activations and dropout
# Freeze parameters so we don't backprop through them
for param in model.parameters():
    param.requires_grad = False #already using trained model, so don't calculate gradients

#replace classifier in model
from collections import OrderedDict
classifier = nn.Sequential(OrderedDict([
                          ('fc1', nn.Linear(1024, 900)), #input to hidden1
                          ('relu1', nn.ReLU()),
                          ('fc2', nn.Linear(900, 102)), #hidden1 to output
                          ('output', nn.LogSoftmax(dim=1))
                          ]))

classifier.dropout = nn.Dropout(0.5)

model.classifier = classifier



# DONE: Do validation on the test set
#Track the loss and accuracy on the validation set to determine the best hyperparameters
def validation(model, validationloader, criterion):
    test_loss = 0
    accuracy = 0
    for images, labels in validationloader:

        #images.resize_(images.shape[0], 1024)
        images, labels = images.to('cuda'), labels.to('cuda')

        output = model.forward(images)
        test_loss += criterion(output, labels).item()

        ps = torch.exp(output)
        equality = (labels.data == ps.max(dim=1)[1])
        accuracy += equality.type(torch.FloatTensor).mean()
    
    return test_loss, accuracy
    
    
#Train the classifier layers using backpropagation using the pre-trained network to get the features
#device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
model.to('cuda')

criterion = nn.NLLLoss()
# Only train the classifier parameters, feature parameters are frozen
optimizer = optim.Adam(model.classifier.parameters(), lr=0.001)



# DONE: Do validation on the test set
#Track the loss and accuracy on the validation set to determine the best hyperparameters
def deep_learn():
    with active_session():
        epochs = 3
        print_every = 40
        steps = 0

        for e in range(epochs):
            model.train()
            #start = time.time()
            running_loss = 0
            for images, labels in iter(testloader):
                steps += 1
                images, labels = images.to('cuda'), labels.to('cuda')
                #images.resize_(images.size()[0], 1024)

                optimizer.zero_grad()

                # Forward pass
                output = model.forward(images)
                loss = criterion(output, labels)
                loss.backward()
                optimizer.step() #updates the weights

                running_loss += loss.item()

                if steps % print_every == 0:
                # Make sure network is in eval mode for inference
                    model.eval() #turn dropout off

                # Turn off gradients for validation, saves memory and computations
                with torch.no_grad():
                    test_loss, accuracy = validation(model, validationloader, criterion)

                print("Epoch: {}/{}.. ".format(e+1, epochs),
                      "Training Loss: {:.3f}.. ".format(running_loss/print_every),
                      "Test Loss: {:.3f}.. ".format(test_loss/len(validationloader)),
                      "Test Accuracy: {:.3f}".format(accuracy/len(validationloader)))

                running_loss = 0

                model.train() #turn dropout back on

deep_learn()


###Next is Save the checkpoint



